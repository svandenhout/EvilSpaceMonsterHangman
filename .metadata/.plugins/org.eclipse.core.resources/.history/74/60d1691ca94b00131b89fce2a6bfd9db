package nl.mprog.evilspacemonsterhangman.models;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
 * builds a 2d array out of the currentWordList
 */
public class EvilHangman extends Hangman {
	
	
	// private ArrayList<char[]> wordList = new ArrayList<char[]>;
    private List<char[]> evilWordList;
	
	public EvilHangman(List<String> wordList, int wordLength, int wrongGuesses) {
		super(wordLength, wrongGuesses);
		super.getCurrentWordState();
		this.evilWordList = new EvilWordList<char[]>();
	}
	
	// builds a char[] out of the words
	@Override
	public void setWordList(List<String> wordList) {
		for(int i = 0; i < super.wordList.size(); i++) {
			evilWordList.add(super.wordList.get(i).toCharArray()); 
		}
	}
	
	public void doEvilUserInput(int key) {
		StringBuilder s = new StringBuilder();
		
		// build a character from the ascii code
        char c = (char) key;
        
        // check if letter is has been used before
        // if not add the letter to usedLetters
        if(this.usedLetters.indexOf(key) == -1) {
            s.append(this.usedLetters);
            s.append(c);
            this.usedLetters = s.toString();
        }else {
        	//return ALREADY_USED;
        }
	}
	
	private void buildCurrentWordState(char key) {
	    List<char[]> _list = new ArrayList<char[]>();

		// make the currentWordState iterable
		char[] ca = super.currentWordState.toCharArray();
		int i;
        // for every word in the wordlist check for the letter
        for(i = 0; i < this.evilWordList.length; i++) {
        	
        	// check if the letter is found in more then 50%
        	// of the words
        	if(Arrays.binarySearch(evilWordList[i], key) == -1) {
        		
        	}
//	        while(true) {
//	            if (word.indexOf(key, i) != -1) {
//	                i = word.indexOf(key, i);
//	                // currentwordstate moet pas geupdate worden na check
//	                ca[i] = c;
//	                i++;
//	            }else {
//	                break;
//	            }
//	        }	
        }
        
        // put the currentWordState back into string form
        super.currentWordState = new String(ca);
	}
}