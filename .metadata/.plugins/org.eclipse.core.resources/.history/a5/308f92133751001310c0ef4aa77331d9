package nl.mprog.evilspacemonsterhangman.models;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
 * builds a 2d array out of the currentWordList
 */
public class EvilHangman extends Hangman {
	
	// private ArrayList<char[]> wordList = new ArrayList<char[]>;
    private List<char[]> evilWordList;
	
    public EvilHangman(int wordLength, int wrongGuesses) {
		super(wordLength, wrongGuesses);
		super.getCurrentWordState();
		this.evilWordList = new ArrayList<char[]>();
	}
	
	public void doEvilUserInput(int key) {
		StringBuilder s = new StringBuilder();
		
		// build a character from the ascii code
        char c = (char) key;
        
        // check if letter is has been used before
        // if not add the letter to usedLetters
        if(this.usedLetters.indexOf(key) == -1) {
            s.append(this.usedLetters);
            s.append(c);
            this.usedLetters = s.toString();
        }else {
        	//return ALREADY_USED;
        }
	}
	
	/*
	 * TODO: build this method
	 * build arrayList of possible answers
	 * ____
	 * _E__
	 * _EE_
	 * E_E_
	 * 
	 * build an equivilance class array and count the doubles
	 */
	private void evilBusiness(int key) {
		List<EqualStringCount> equivList = new ArrayList<EqualStringCount>();
		
        // for every word in the wordlist check for the letter
	    for(String word : wordList) {
	    	// put first word into EqualStringCount to start the process
	    	if(equivList.size() == 0)
	    		equivList.add(this.buildEquivalenceString(word, key));
    		// loop through the equivList to check for equalStrings
	    	for(EqualStringCount eqString: equivList) {
	    		eqString.checkWord(equivWord)
	    	}
    	}
        
	}
	
	/*
	 * returns an equivalence string, a representation of a
	 * possible outcome if the user would get this word
	 * example:
	 * 
	 * "____"
	 * "_E__"
	 */
	public String buildEquivalenceString(String word, int key) {
		// use the currentWordState to generate several
		// equivalence Strings
		char[] _ca = super.currentWordState.toCharArray();
		char c = (char) key;
		int i = 0;
		while(true) {
            if (word.indexOf(key, i) != -1) {
                i = word.indexOf(key, i);
                _ca[i] = c;
                i++;
            }else {
                break;
            }
        }
		String equivString = new String(_ca);
		return equivString;
	}
}